// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// qexp
arma::vec qexp(arma::vec& u, double lambda);
RcppExport SEXP _r11_qexp(SEXP uSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(qexp(u, lambda));
    return rcpp_result_gen;
END_RCPP
}
// rexp
arma::vec rexp(unsigned int n, double lambda, const unsigned int& seed);
RcppExport SEXP _r11_rexp(SEXP nSEXP, SEXP lambdaSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(rexp(n, lambda, seed));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_r11_qexp", (DL_FUNC) &_r11_qexp, 2},
    {"_r11_rexp", (DL_FUNC) &_r11_rexp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_r11(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
